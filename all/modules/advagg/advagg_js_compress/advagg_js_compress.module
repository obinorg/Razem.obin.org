<?php

/**
 * @file
 * Advanced CSS/JS aggregation js compression module.
 *
 */

/**
 * Default value to see if the callback is working.
 */
define('ADVAGG_JS_COMPRESS_CALLBACK', FALSE);

/**
 * Default value to see packer is enabled.
 */
define('ADVAGG_JS_COMPRESS_PACKER_ENABLE', FALSE);

/**
 * Implementation of hook_menu
 */
function advagg_js_compress_menu() {
  $items = array();
  $file_path = drupal_get_path('module', 'advagg_js_compress');

  $items['advagg/js_compress_test_file'] = array(
    'page callback' => 'advagg_js_compress_test_file',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );
  $items['admin/settings/advagg/js-compress'] = array(
    'title' => 'JS Compression',
    'description' => 'Adjust JS Compression settings.',
    'page callback' => 'advagg_js_compress_admin_page',
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer site configuration'),
    'file path' => $file_path,
    'file' => 'advagg_js_compress.admin.inc',
  );

  return $items;
}

/**
 * Implement hook_init.
 */
function advagg_js_compress_init() {
  global $conf;
  // Do not use the minified jquery if we are going to compress.
  $conf['jquery_update_compression_type'] = 'none';

  if (variable_get('advagg_js_compress_packer_enable', ADVAGG_JS_COMPRESS_PACKER_ENABLE)) {
    $conf['advagg_file_save_function'] = 'advagg_js_compress_file_saver';
  }
}

/**
 * Implement hook_advagg_files_table.
 */
function advagg_js_compress_advagg_files_table($row, $checksum) {
  // IF the file has changed, test it's compressibility.
  if ($row['filetype'] = 'js' && $checksum != $row['checksum']) {
    $files_to_test[] = array(
      'md5' => $row['filename_md5'],
      'filename' => $row['filename'],
    );
    advagg_js_compress_test_compression($files_to_test);
  }
}

/**
 * Implement hook_advagg_js_pre_alter.
 */
function advagg_js_compress_advagg_js_pre_alter(&$javascript, $preprocess_js, $public_downloads, $scope) {
  if (module_exists('jquery_update')) {
    return;
  }

  foreach ($javascript as $type => $data) {
    if (!$data) {
      continue;
    }
    if ($type == 'setting' || $type == 'inline') {
      continue;
    }
    foreach ($data as $path => $info) {
      if ($path == 'misc/jquery.form.js') {
        $new_path = drupal_get_path('module', 'advagg_js_compress') . '/jquery.form.js';
        $javascript[$type][$new_path] = $info;
        unset($javascript[$type][$path]);
      }
    }
  }
}

/**
 * Implement hook_advagg_js_alter.
 */
function advagg_js_compress_advagg_js_alter(&$contents, $files, $bundle_md5) {
  // Make sure every file in this aggregate is compressible.
  $files_to_test = array();
  $all_ok = TRUE;
  foreach ($files as $filename) {
    $filename_md5 = md5($filename);
    $data = advagg_get_file_data($filename_md5);

    // File needs to be tested.
    if (empty($data['advagg_js_compress']['tested'])) {
      $files_to_test[] = array(
        'md5' => $filename_md5,
        'filename' => $filename,
      );
    }
    elseif ($data['advagg_js_compress']['tested']['jsminplus'] == -1) {
      $all_ok = FALSE;
      $list_bad[$filename] = $filename;
    }
  }

  $advagg_js_compress_callback = variable_get('advagg_js_compress_callback', ADVAGG_JS_COMPRESS_CALLBACK);
  if ($advagg_js_compress_callback) {
    // Send test files to worker.
    $list_bad = array();
    if (!empty($files_to_test)) {
      $compressible = advagg_js_compress_test_compression($files_to_test);
      // If an array then it is a list of files that can not be compressed.
      if (is_array($compressible)) {
        $all_ok = FALSE;
        // Place filename in an array key.
        foreach ($compressible as $file) {
          $file = $file['filename'];
          $list_bad[$file] = $file['filename'];
        }
      }
    }
  }

  // Bypass bad files & compress the rest.
  if (!$all_ok && !empty($list_bad)) {
    $contents = '';
    // Do not compress the file that it bombs on.
    $list_good = array();
    foreach ($files as $file) {
      if (!empty($list_bad[$file])) {
        $data = advagg_build_js_bundle($list_good);
        advagg_js_compress_jsminplus($data);
        $data .= ";\n" . advagg_build_js_bundle(array($file));
        $contents .= $data;
        $list_good = array();
      }
      else {
        $list_good[] = $file;
      }
    }
    if (!empty($list_good)) {
      $data = advagg_build_js_bundle($list_good);
      advagg_js_compress_jsminplus($data);
      $contents .= $data;
    }
  }
  else {
    // If all files are compressible, compress all in one.
    advagg_js_compress_jsminplus($contents);
  }
}

/**
 * Compress a JS string using jsmin+
 *
 * @param $contents
 *   Javascript string.
 */
function advagg_js_compress_jsminplus(&$contents) {
  // JSMin+ the contents of the aggregated file.
  require_once(drupal_get_path('module', 'advagg_js_compress') .'/jsminplus.inc');
  // Strip Byte Order Marks (BOM's) from the file, JSMin+ cannot parse these.
  $contents = str_replace(pack("CCC", 0xef, 0xbb, 0xbf), "", $contents);
  $contents = JSMinPlus::minify($contents);
}

/**
 * Run various theme functions so the cache is primed.
 *
 * @param $files_to_test
 *   array with md5 and filename.
 * @return
 *   TRUE if all files are compressible. List of files that failed otherwise.
 */
function advagg_js_compress_test_compression($files_to_test) {
  global $base_path;
  $bad_files = array();
  foreach ($files_to_test as $info) {
    // Mark as "bad" by filename.
    if (   strpos($info['filename'], '.jsmin.js') !== FALSE
        || strpos($info['filename'], '.min.js') !== FALSE
        || strpos($info['filename'], '.pack.js') !== FALSE
        || strpos($info['filename'], '.packed.js') !== FALSE
          ) {
      $data['advagg_js_compress']['tested']['jsminplus'] = -1;
      $bad_files[] = $info;
      advagg_set_file_data($info['md5'], $data);
      continue;
    }

    $key = variable_get('advagg_js_compress_url_key', FALSE);
    if (empty($key)) {
      $key = mt_rand();
      variable_set('advagg_js_compress_url_key', $key);
    }

    // Setup request URL and headers.
    $query['values'] = $info;
    $query['key'] = $key;
    $query_string = http_build_query($query, '', '&');
    $ip = variable_get('advagg_server_addr', FALSE);
    if (empty($ip)) {
      $ip = empty($_SERVER['SERVER_ADDR']) ? '127.0.0.1' : $_SERVER['SERVER_ADDR'];
    }
    $url = 'http://' . $ip . $base_path . 'advagg/js_compress_test_file';
    $headers = array(
      'Host' => $_SERVER['HTTP_HOST'],
      'Content-Type' => 'application/x-www-form-urlencoded',
    );

    $results = drupal_http_request($url, $headers, 'POST', $query_string);
    $data = advagg_get_file_data($info['md5']);
    if ($results->data == $info['md5']) {
      $data['advagg_js_compress']['tested']['jsminplus'] = 1;
    }
    else {
      $data['advagg_js_compress']['tested']['jsminplus'] = -1;
      $bad_files[] = $info;
    }
    advagg_set_file_data($info['md5'], $data);
  }
  if (empty($bad_files)) {
    return TRUE;
  }
  return $bad_files;
}

/**
 * Run various theme functions so the cache is primed.
 *
 * @param $values
 *   object File info
 */
function advagg_js_compress_test_file($values = NULL) {
//   watchdog('debug', str_replace('    ', '&nbsp;&nbsp;&nbsp;&nbsp;', nl2br(htmlentities(print_r($values, TRUE) . print_r($_REQUEST, TRUE)))));

  // Exit if key does not match & called with $file not set.
  if (is_null($values)) {
    if (empty($_POST['key']) || empty($_POST['values'])) {
      return;
    }
    $key = variable_get('advagg_js_compress_url_key', FALSE);
    if ($key != $_POST['key']) {
      return;
    }
    $values = array();
    $values['values'] = $_POST['values'];
  }

  // Compression test file if it exists.
  if (file_exists($values['values']['filename'])) {
    $contents = file_get_contents($values['values']['filename']);
    advagg_js_compress_jsminplus($contents);
  }

  echo $values['values']['md5'];
  exit;
}

/**
 * Save a string to the specified destination. Verify that file size is not zero.
 *
 * @param $data
 *   A string containing the contents of the file.
 * @param $dest
 *   A string containing the destination location.
 * @return
 *   Boolean indicating if the file save was successful.
 */
function advagg_js_compress_file_saver($data, $dest, $force, $type) {
  watchdog('x', 'y');
  if ($type == 'css') {
    return advagg_file_saver($data, $dest, $force, $type);
  }
  if (!variable_get('advagg_gzip_compression', ADVAGG_GZIP_COMPRESSION) || !extension_loaded('zlib')) {
    return advagg_file_saver($data, $dest, $force, $type);
  }

  // Get file save function
  $file_save_data = 'file_save_data';
  $custom_path = variable_get('advagg_custom_files_dir', ADVAGG_CUSTOM_FILES_DIR);
  if (!empty($custom_path)) {
    $file_save_data = 'advagg_file_save_data';
  }

  // Gzip first.
  $gzip_dest = $dest . '.gz';
  if (!file_exists($gzip_dest) || $force) {
    $gzip_data = gzencode($data, 9, FORCE_GZIP);
    if (!$file_save_data($gzip_data, $gzip_dest, FILE_EXISTS_REPLACE)) {
      return FALSE;
    }

    // Make sure filesize is not zero.
    clearstatcache();
    if (@filesize($gzip_dest) == 0) {
      if (!$file_save_data($gzip_data, $gzip_dest, FILE_EXISTS_REPLACE)) {
        return FALSE;
      }
      clearstatcache();
      if (@filesize($gzip_dest) == 0) {
        // Filename is bad, create a new one next time.
        file_delete($gzip_dest);
        return FALSE;
      }
    }
  }

  // Use packer on JS data.
  advagg_js_compress_jspacker($data);

  // Write File.
  if (!$file_save_data($data, $dest, FILE_EXISTS_REPLACE)) {
    return FALSE;
  }

  // Make sure filesize is not zero.
  clearstatcache();
  if (@filesize($dest) == 0) {
    if (!$file_save_data($data, $dest, FILE_EXISTS_REPLACE)) {
      return FALSE;
    }
    clearstatcache();
    if (@filesize($dest) == 0) {
      // Filename is bad, create a new one next time.
      file_delete($dest);
      return FALSE;
    }
  }

  // Make sure .htaccess file exists.
  advagg_htaccess_check_generate($dest);

  cache_set($dest, time(), 'cache_advagg', CACHE_PERMANENT);
  return TRUE;
}

/**
 * Compress a JS string using packer.
 *
 * @param $contents
 *   Javascript string.
 */
function advagg_js_compress_jspacker(&$contents) {
  // Use Packer on the contents of the aggregated file.
  require_once(drupal_get_path('module', 'advagg_js_compress') .'/jspacker.inc');

  // Add semicolons to the end of lines if missing.
  $contents = str_replace("}\n", "};\n", $contents);
  $contents = str_replace("\nfunction", ";\nfunction", $contents);

  // Remove char returns, looking at you lightbox2.
  $contents = str_replace("\n\r", "", $contents);
  $contents = str_replace("\r", "", $contents);
  $contents = str_replace("\n", "", $contents);

  $packer = new JavaScriptPacker($contents, 62, TRUE, FALSE);
  $contents = $packer->pack();
}
